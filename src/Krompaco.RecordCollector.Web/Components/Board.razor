@using System.Text.Json
@using System.Net
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json.Serialization

@inject ILogger<Board> Logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

@{
    var position = 0;

    if (this.SiteRootToStartFrom == null || this.FlatResults == null)
    {
        return;
    }
}

@foreach (var site in this.SiteRootToStartFrom.Sites.OrderByDescending(x => GetAverage(x.Id, this.SiteRootToStartFrom.Sites, this.FlatResults)))
{
    var siteResults = this.FlatResults.Where(x => x.SiteId == site.Id).ToList();

    if (!siteResults.Any())
    {
        continue;
    }

    position++;

    <h2 class="mt-6 pt-6 border-t border-gray-800 text-xl tracking-tight font-bold md:text-2xl flex items-center flex-wrap gap-3">
        <span>
            @(position).
        </span>

        <a class="link-primary outline-primary" href="/sites/@GetFileName(site).Replace(".html", "/")">
            @((MarkupString)GetSiteNameHtml(site.Url))
        </a>

        <span class="@Program.GetRatingClassName(siteResults.Average(x => x.Rating).ToString("0.00", new CultureInfo("en-US"))) px-2 pt-1.5 pb-1 rounded-md">
            @siteResults.Average(x => x.Rating).ToString("0.00", new CultureInfo("en-US"))
        </span>
    </h2>

    <ul class="flex items-center flex-wrap gap-3 mt-1">
        @foreach (var result in siteResults)
        {
            <li class="@Program.GetRatingClassName(result.Rating.ToString("0.00", new CultureInfo("en-US"))) px-2 pt-1.5 pb-1 rounded-md mt-3">
                <span class="font-extrabold">
                    @GetTypeOfTest(result.TypeOfTest)
                </span>
                <span>
                    @result.Rating.ToString("0.00", new CultureInfo("en-US"))
                </span>
            </li>
        }
    </ul>
}

@code {
    private static object semaphoreGate = new object();

    public static Dictionary<int, string> AllTestTypes { get; } = new Dictionary<int, string>
    {
        { 1, "Lighthouse Performance" },
        { 2, "404 Page" },
        { 4, "Lighthouse SEO" },
        { 5, "Lighthouse Best Practices" },
        { 6, "W3C HTML" },
        { 7, "W3C CSS" },
        { 9, "Standard Files" },
        { 10, "Lighthouse A11y" },
        { 15, "Sitespeed.io" },
        { 17, "Yellow Lab Tools" },
        { 18, "Pa11y" },
        { 20, "Integrity & Security" },
        ////{ 21, "HTTP & Tech" },
        { 22, "Energy Efficiency" },
        { 23, "Tracking" },
        ////{ 24, "E-mail*" },
        { 25, "Software" },
        ////{ 26, "A11y Statement" },
    };

    public static int[] TestTypesExcludedFromAverageRating { get; } = [24, 26];

    protected SiteRoot? SiteRootToStartFrom { get; set; }

    protected List<Test>? FlatResults { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var path = this.Configuration.GetValue<string>("AppSettings:WebperfJsonDataRootPath");
        var sitesPath = this.Configuration.GetValue<string>("AppSettings:WebperfSitesJsonFilePath");

        if (!File.Exists(sitesPath))
        {
            return;
        }

        var exists = Directory.Exists(path);

        if (!exists)
        {
            return;
        }

        var di = new DirectoryInfo(path);

        var list = di.EnumerateFiles("*.json", SearchOption.AllDirectories)
            .OrderBy(x => x.Name)
            .ToList();

        if (!list.Any())
        {
            return;
        }

        var siteRoot = JsonSerializer.Deserialize<SiteRoot>(await File.ReadAllTextAsync(sitesPath)) ?? new SiteRoot();

        var prefixes = new List<string>
                {
                    $"{DateTime.UtcNow.AddMonths(-1).Year}/{DateTime.UtcNow.AddMonths(-1):MM}/",
                    $"{DateTime.UtcNow.Year}/{DateTime.UtcNow:MM}/",
                };

        var i = 0;
        var listOfAll = new List<ReportItem>();

        foreach (var prefix in prefixes)
        {
            foreach (var blobItem in list)
            {
                if (!blobItem.Name.Contains("-")
                    || !blobItem.Name.EndsWith(".json", StringComparison.Ordinal))
                {
                    continue;
                }

                var blobStyleFullName = blobItem.FullName.Replace(path, string.Empty).TrimStart(Path.DirectorySeparatorChar);

                var dateFromFileName = GetDateTimeFromFileName(blobStyleFullName);
                var lastModified = blobItem.LastWriteTimeUtc;
                listOfAll.Add(new ReportItem { Index = i, BlobItemName = blobStyleFullName, SplitBySlash = blobStyleFullName.Split(Path.DirectorySeparatorChar), DateFromFileName = dateFromFileName, LastModified = lastModified });
                i++;
            }
        }

        listOfAll = listOfAll.OrderByDescending(x => x.DateFromFileName).ToList();
        var flatResults = new List<Test>();
        var allSiteNames = listOfAll.Select(x => x.SplitBySlash?[2]).Distinct().ToList();
        var siteId = 0;

        foreach (var siteName in allSiteNames)
        {
            siteId++;

            var matchingSite = siteRoot?.Sites.FirstOrDefault(x => GetPathName(x.Url) == siteName);

            if (matchingSite == null)
            {
                continue;
            }

            matchingSite.Id = siteId;

            foreach (var testType in AllTestTypes)
            {
                var latestReport = listOfAll.FirstOrDefault(x => x.SplitBySlash?[2] == siteName && x.SplitBySlash?[3] == "test-" + GetTypeOfTestFileName(testType.Key));

                if (latestReport == null)
                {
                    continue;
                }

                this.Logger.LogInformation($"About to use: {latestReport.BlobItemName}");

                var testRoot = JsonSerializer.Deserialize<TestRoot>(await File.ReadAllTextAsync(path.TrimEnd(Path.DirectorySeparatorChar) + Path.DirectorySeparatorChar + latestReport.BlobItemName));

                if (testRoot == null)
                {
                    continue;
                }

                foreach (var test in testRoot.Tests)
                {
                    test.SiteId = siteId;

                    if (test.Rating < 0.999)
                    {
                        test.Rating = 1.0;
                    }

                    flatResults.Add(test);
                }
            }
        }

        this.SiteRootToStartFrom = siteRoot;
        this.FlatResults = flatResults;

        // Generate files
        CreateSitePages(siteRoot!.Sites, flatResults, this.Configuration.GetAppSettingsContentRootPath());
    }

    protected static string GetPathName(string url)
    {
        var pageFileName = GetSiteName(url);
        return pageFileName
            .Replace(".", "-")
            .Replace("/", "-");
    }

    protected static double GetAverage(int forSiteId, List<Site> sites, List<Test> flatResults)
    {
        var siteResults = flatResults.Where(x => x.SiteId == forSiteId).ToList();
        return !siteResults.Any() ? 0d : siteResults.Average(x => x.Rating);
    }

    protected static double GetAverageByTests(List<Test> tests)
    {
        return !tests.Any() ? 0d : tests.Where(x => !TestTypesExcludedFromAverageRating.Contains(x.TypeOfTest)).Average(x => x.Rating);
    }

    protected static string GetFileName(Site site)
    {
        var pageFileName = GetSiteName(site.Url);
        return pageFileName
            .Replace(".", "-")
            .Replace("/", "-") + ".html";
    }

    protected static string GetTypeOfTestFileName(int id)
    {
        var x = id.ToString();
        return x.Length == 1 ? "0" + x : x;
    }

    protected static string GetHtmlFromTest(Test result)
    {
        var md = result.Report;

        // { 1, "Lighthouse Performance" },
        // { 2, "404 Page" },
        // { 4, "Lighthouse SEO" },
        // { 5, "Lighthouse Best Practices" },
        // { 6, "W3C HTML" },
        // { 7, "W3C CSS" },
        // { 9, "Standard Files" },
        // { 10, "Lighthouse A11y" },
        // { 15, "Sitespeed.io" },
        // { 17, "Yellow Lab Tools" },
        // { 18, "Pa11y" },
        // { 20, "Integrity & Security" },
        // { 21, "HTTP & Tech" },
        // { 22, "Carbon Calculator" },
        // { 23, "Tracking" },
        // { 24, "E-mail" },
        // { 25, "Software" },
        // { 26, "A11y Statement" },
        if (!string.IsNullOrWhiteSpace(result.ReportA11y)
            && result.TypeOfTest != 2
            && result.TypeOfTest != 21)
        {
            md += Environment.NewLine + Environment.NewLine + "Accessibility section:" + Environment.NewLine + result.ReportA11y;
        }

        if (!string.IsNullOrWhiteSpace(result.ReportPerf)
            && result.TypeOfTest != 21)
        {
            md += Environment.NewLine + Environment.NewLine + "Performance section:" + Environment.NewLine + result.ReportPerf;
        }

        if (!string.IsNullOrWhiteSpace(result.ReportSec)
            && result.TypeOfTest != 5
            && result.TypeOfTest != 9
            && result.TypeOfTest != 17
            && result.TypeOfTest != 21
            && result.TypeOfTest != 24)
        {
            md += Environment.NewLine + Environment.NewLine + "Security section:" + Environment.NewLine + result.ReportSec;
        }

        if (!string.IsNullOrWhiteSpace(result.ReportStand)
            && result.TypeOfTest != 1
            && result.TypeOfTest != 2
            && result.TypeOfTest != 4
            && result.TypeOfTest != 5
            && result.TypeOfTest != 17)
        {
            md += Environment.NewLine + Environment.NewLine + "Standards section:" + Environment.NewLine + result.ReportStand;
        }

        md = md.Trim('\r', '\n', ' ', '\t');

        if (string.IsNullOrWhiteSpace(md))
        {
            md = result.TypeOfTest == 26 ? "- No accessibility statement detected." : "- No report data created.";
        }

        return $"<div class=\"webperf-md text-xs mt-1\">{HtmlEncoder.Default.Encode(md).Replace("&#xD;&#xA;", "<br>").Replace("&#xA;", "<br>").Replace("<br><br><br><br>", "<br><br>").Replace("<br><br><br>", "<br><br>").Replace("&amp;quot;", @"""")}</div>";
    }

    protected static void CreateSitePages(List<Site> sites, List<Test> flatResults, string contentPath)
    {
        var sitesPath = Path.Combine(contentPath, "sites");

        lock (semaphoreGate)
        {
            if (!Directory.Exists(sitesPath))
            {
                Directory.CreateDirectory(sitesPath);
            }

            foreach (var site in sites)
            {
                var pageFullPath = Path.Combine(sitesPath, GetFileName(site));

                if (File.Exists(pageFullPath))
                {
                    return;
                }

                var siteResults = flatResults.Where(x => x.SiteId == site.Id).ToList();

                if (!siteResults.Any())
                {
                    continue;
                }

                var pageHtml = $"<p class=\"inline-block mt-4 text-xl tracking-tight font-bold md:text-2xl px-2 pt-1.5 pb-1 rounded-md\">{GetAverageByTests(siteResults).ToString("0.00", new CultureInfo("en-US"))}</p><p class=\"mt-4 font-medium text-lg\">Results from <a href=\"{WebUtility.HtmlEncode(site.Url)}\" class=\"link-primary outline-primary\">{WebUtility.HtmlEncode(site.Url)}</a></p>";

                foreach (var result in siteResults)
                {
                    pageHtml +=
                        $"<div class=\"mt-10\"><h2 class=\"mt-6 pt-6 border-t border-gray-800 text-xl tracking-tight font-bold md:text-2xl\">{WebUtility.HtmlEncode(GetTypeOfTest(result.TypeOfTest))}</h2><p class=\"inline-block my-3 px-2 pt-1.5 pb-1 rounded-md\">{result.Rating.ToString("0.00", new CultureInfo("en-US"))}</p><p class=\"font-medium text-sm\">Results collected at {result.Date:yyyy-MM-dd}</p>{GetHtmlFromTest(result)}</div>";
                }

                var pageFileContent = $"{{{Environment.NewLine}\"title\": \"{GetSiteNameHtml(site.Url)}\", \"date\": \"{DateTime.UtcNow:yyyy-MM-dd}\", \"description\": \"Webperf ratings for {GetSiteName(site.Url)}\"{Environment.NewLine}}}{Environment.NewLine}{pageHtml}";

                using var sw = new StreamWriter(File.Open(pageFullPath, FileMode.Create), new UTF8Encoding(false));
                sw.WriteLine(pageFileContent);
            }
        }
    }

    private static string GetTypeOfTest(int id)
    {
        return AllTestTypes.GetValueOrDefault(id, "Unknown test");
    }

    private static string GetSiteName(string input)
    {
        return input
            .TrimEnd("/".ToCharArray())
            .Replace("https://www.", string.Empty)
            .Replace("http://www.", string.Empty)
            .Replace("https://", string.Empty)
            .Replace("http://", string.Empty);
    }

    private static string GetSiteNameHtml(string input)
    {
        return WebUtility.HtmlEncode(GetSiteName(input))
            .Replace(".", "&thinsp;.")
            .Replace("/", "/&thinsp;");
    }

    private static DateTime GetDateTimeFromFileName(string name)
    {
        // 2024-03-26-18-26.json
        if (name.Length > 20 && (name.Contains(Path.DirectorySeparatorChar + "test-") || name.Contains(Path.DirectorySeparatorChar + "crux-")) && name.EndsWith(".json", StringComparison.Ordinal))
        {
            var lastPart = name.Substring(name.Length - 21).Replace(".json", string.Empty).Split('-');
            var x = new DateTime(
                Convert.ToInt32(lastPart[0]),
                Convert.ToInt32(lastPart[1]),
                Convert.ToInt32(lastPart[2]),
                Convert.ToInt32(lastPart[3]),
                Convert.ToInt32(lastPart[4]),
                0);
            var utcTime = DateTime.SpecifyKind(x, DateTimeKind.Utc);
            return utcTime;
        }

        throw new NullReferenceException($"Name without date: " + name);
    }

    // Models used in JSON files
    protected class SiteRoot
    {
        public SiteRoot()
        {
            this.Sites = new List<Site>();
        }

        [JsonPropertyName("sites")]
        public List<Site> Sites { get; set; }
    }

    protected class Site
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }
    }

    protected class TestRoot
    {
        public TestRoot()
        {
            this.Tests = new List<Test>();
        }

        [JsonPropertyName("tests")]
        public List<Test> Tests { get; set; }
    }

    protected class Test
    {
        [JsonPropertyName("site_id")]
        public int SiteId { get; set; }

        [JsonPropertyName("type_of_test")]
        public int TypeOfTest { get; set; }

        [JsonPropertyName("rating")]
        public double Rating { get; set; }

        [JsonPropertyName("rating_sec")]
        public double RatingSec { get; set; }

        [JsonPropertyName("rating_perf")]
        public double RatingPerf { get; set; }

        [JsonPropertyName("rating_a11y")]
        public double RatingA11y { get; set; }

        [JsonPropertyName("rating_stand")]
        public double RatingStand { get; set; }

        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        [JsonPropertyName("report")]
        public string Report { get; set; }

        [JsonPropertyName("report_sec")]
        public string ReportSec { get; set; }

        [JsonPropertyName("report_perf")]
        public string ReportPerf { get; set; }

        [JsonPropertyName("report_a11y")]
        public string ReportA11y { get; set; }

        [JsonPropertyName("report_stand")]
        public string ReportStand { get; set; }

        [JsonPropertyName("data")]
        public string Data { get; set; }
    }

    public record ReportItem
    {
        public long Index { get; set; }

        public required string BlobItemName { get; set; }

        public required string[] SplitBySlash { get; set; }

        public required DateTime DateFromFileName { get; set; }

        public required DateTime LastModified { get; set; }
    }
}
